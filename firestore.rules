rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // 사용자 인증 확인 함수
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // 요청한 사용자의 UID와 문서의 userId가 일치하는지 확인
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // 속도 제한 함수 (1분당 최대 10회)
    function rateLimitOk() {
      let minuteAgo = request.time - duration.value(1, 'm');
      let recentWrites = getCountFromServer(/databases/$(database)/documents/users/$(request.auth.uid)/writes)
        .where('timestamp', '>', minuteAgo).data.count;
      return recentWrites < 10;
    }
    
    // 기본 사용자 컬렉션
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && rateLimitOk();
      
      // 사용자별 하위 컬렉션
      match /private/{document=**} {
        allow read, write: if isOwner(userId) && rateLimitOk();
      }
    }
    
    // 공개 게시물 컬렉션
    match /posts/{postId} {
      allow read: if true; // 누구나 읽기 가능
      allow create: if isAuthenticated() 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.createdAt == request.time
        && rateLimitOk();
      allow update, delete: if isAuthenticated() 
        && resource.data.userId == request.auth.uid
        && rateLimitOk();
        
      // 댓글 하위 컬렉션
      match /comments/{commentId} {
        allow read: if true;
        allow create: if isAuthenticated()
          && request.resource.data.userId == request.auth.uid
          && rateLimitOk();
        allow update, delete: if isAuthenticated()
          && resource.data.userId == request.auth.uid
          && rateLimitOk();
      }
    }
    
    // 공개 설정 컬렉션
    match /settings/{document=**} {
      allow read: if true;
      allow write: if false; // 관리자만 수정 가능 (Firebase Admin SDK 사용)
    }
  }
}